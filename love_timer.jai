// This file was generated by generate_bindings.lua



// Returns the average delta time (seconds per frame) over the last second.
love_timer_getAverageDelta :: () -> (delta: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "timer");
	lua.getfield(L, -1, "getAverageDelta");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.tonumber(L, -1);
}
// Returns the time between the last two frames.
love_timer_getDelta :: () -> (dt: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "timer");
	lua.getfield(L, -1, "getDelta");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.tonumber(L, -1);
}
// Returns the current frames per second.
love_timer_getFPS :: () -> (fps: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "timer");
	lua.getfield(L, -1, "getFPS");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.tonumber(L, -1);
}
// Returns the value of a timer with an unspecified starting time.
love_timer_getTime :: () -> (time: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "timer");
	lua.getfield(L, -1, "getTime");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.tonumber(L, -1);
}
// Pauses the current thread for the specified amount of time.
love_timer_sleep :: (s: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "timer");
	lua.getfield(L, -1, "sleep");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, s);
	lua.call(L, 1, 0);
}
// Measures the time between two frames.
love_timer_step :: () -> (dt: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "timer");
	lua.getfield(L, -1, "step");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.tonumber(L, -1);
}
