// This file was generated by generate_bindings.lua

CompressedImageData :: #type,distinct lua.Ref;
ImageData :: #type,distinct lua.Ref;

CompressedImageFormat :: enum {
	DXT1; // DXT1
	DXT3; // DXT3
	DXT5; // DXT5
	BC4; // BC4
	BC4s; // BC4s
	BC5; // BC5
	BC5s; // BC5s
	BC6h; // BC6h
	BC6hs; // BC6hs
	BC7; // BC7
	ETC1; // ETC1
	ETC2rgb; // ETC2rgb
	ETC2rgba; // ETC2rgba
	ETC2rgba1; // ETC2rgba1
	EACr; // EACr
	EACrs; // EACrs
	EACrg; // EACrg
	EACrgs; // EACrgs
	PVR1rgb2; // PVR1rgb2
	PVR1rgb4; // PVR1rgb4
	PVR1rgba2; // PVR1rgba2
	PVR1rgba4; // PVR1rgba4
	ASTC4x4; // ASTC4x4
	ASTC5x4; // ASTC5x4
	ASTC5x5; // ASTC5x5
	ASTC6x5; // ASTC6x5
	ASTC6x6; // ASTC6x6
	ASTC8x5; // ASTC8x5
	ASTC8x6; // ASTC8x6
	ASTC8x8; // ASTC8x8
	ASTC10x5; // ASTC10x5
	ASTC10x6; // ASTC10x6
	ASTC10x8; // ASTC10x8
	ASTC10x10; // ASTC10x10
	ASTC12x10; // ASTC12x10
	ASTC12x12; // ASTC12x12
}
CompressedImageFormatMap :: string.[ "DXT1", "DXT3", "DXT5", "BC4", "BC4s", "BC5", "BC5s", "BC6h", "BC6hs", "BC7", "ETC1", "ETC2rgb", "ETC2rgba", "ETC2rgba1", "EACr", "EACrs", "EACrg", "EACrgs", "PVR1rgb2", "PVR1rgb4", "PVR1rgba2", "PVR1rgba4", "ASTC4x4", "ASTC5x4", "ASTC5x5", "ASTC6x5", "ASTC6x6", "ASTC8x5", "ASTC8x6", "ASTC8x8", "ASTC10x5", "ASTC10x6", "ASTC10x8", "ASTC10x10", "ASTC12x10", "ASTC12x12" ];

ImageFormat :: enum {
	TGA; // tga
	PNG; // png
	JPG; // jpg
	BMP; // bmp
}
ImageFormatMap :: string.[ "tga", "png", "jpg", "bmp" ];

PixelFormat :: enum {
	Unknown; // unknown
	Normal; // normal
	HDR; // hdr
	R8; // r8
	RG8; // rg8
	RGBA8; // rgba8
	SRGBA8; // srgba8
	R16; // r16
	RG16; // rg16
	RGBA16; // rgba16
	R16f; // r16f
	RG16f; // rg16f
	RGBA16f; // rgba16f
	R32f; // r32f
	RG32f; // rg32f
	RGBA32f; // rgba32f
	LA8; // la8
	RGBA4; // rgba4
	RGB5A1; // rgb5a1
	RGB565; // rgb565
	RGB10A2; // rgb10a2
	RG11B10f; // rg11b10f
	STENCIL8; // stencil8
	DEPTH16; // depth16
	DEPTH24; // depth24
	DEPTH32f; // depth32f
	Depth24Stencil8; // depth24stencil8
	Depth32fStencil8; // depth32fstencil8
	DXT1; // DXT1
	DXT3; // DXT3
	DXT5; // DXT5
	BC4; // BC4
	BC4s; // BC4s
	BC5; // BC5
	BC5s; // BC5s
	BC6h; // BC6h
	BC6hs; // BC6hs
	BC7; // BC7
	ETC1; // ETC1
	ETC2rgb; // ETC2rgb
	ETC2rgba; // ETC2rgba
	ETC2rgba1; // ETC2rgba1
	EACr; // EACr
	EACrs; // EACrs
	EACrg; // EACrg
	EACrgs; // EACrgs
	PVR1rgb2; // PVR1rgb2
	PVR1rgb4; // PVR1rgb4
	PVR1rgba2; // PVR1rgba2
	PVR1rgba4; // PVR1rgba4
	ASTC4x4; // ASTC4x4
	ASTC5x4; // ASTC5x4
	ASTC5x5; // ASTC5x5
	ASTC6x5; // ASTC6x5
	ASTC6x6; // ASTC6x6
	ASTC8x5; // ASTC8x5
	ASTC8x6; // ASTC8x6
	ASTC8x8; // ASTC8x8
	ASTC10x5; // ASTC10x5
	ASTC10x6; // ASTC10x6
	ASTC10x8; // ASTC10x8
	ASTC10x10; // ASTC10x10
	ASTC12x10; // ASTC12x10
	ASTC12x12; // ASTC12x12
}
PixelFormatMap :: string.[ "unknown", "normal", "hdr", "r8", "rg8", "rgba8", "srgba8", "r16", "rg16", "rgba16", "r16f", "rg16f", "rgba16f", "r32f", "rg32f", "rgba32f", "la8", "rgba4", "rgb5a1", "rgb565", "rgb10a2", "rg11b10f", "stencil8", "depth16", "depth24", "depth32f", "depth24stencil8", "depth32fstencil8", "DXT1", "DXT3", "DXT5", "BC4", "BC4s", "BC5", "BC5s", "BC6h", "BC6hs", "BC7", "ETC1", "ETC2rgb", "ETC2rgba", "ETC2rgba1", "EACr", "EACrs", "EACrg", "EACrgs", "PVR1rgb2", "PVR1rgb4", "PVR1rgba2", "PVR1rgba4", "ASTC4x4", "ASTC5x4", "ASTC5x5", "ASTC6x5", "ASTC6x6", "ASTC8x5", "ASTC8x6", "ASTC8x8", "ASTC10x5", "ASTC10x6", "ASTC10x8", "ASTC10x10", "ASTC12x10", "ASTC12x12" ];


// Determines whether a file can be loaded as CompressedImageData.
love_image_isCompressed :: (filename: *u8) -> (compressed: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "image");
	lua.getfield(L, -1, "isCompressed");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, filename);
	lua.call(L, 1, 1);

	return lua.toboolean(L, -1);
}
// Determines whether a file can be loaded as CompressedImageData.
love_image_isCompressed :: (filedata: FileData) -> (compressed: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "image");
	lua.getfield(L, -1, "isCompressed");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.rawgeti(L, lua.LUA_REGISTRYINDEX, xx filedata);
	lua.call(L, 1, 1);

	return lua.toboolean(L, -1);
}
// Create a new CompressedImageData object from a compressed image file. LÖVE supports several compressed texture formats, enumerated in the CompressedImageFormat page.
love_image_newCompressedData :: (filename: *u8) -> (compressedimagedata: CompressedImageData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "image");
	lua.getfield(L, -1, "newCompressedData");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, filename);
	lua.call(L, 1, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Create a new CompressedImageData object from a compressed image file. LÖVE supports several compressed texture formats, enumerated in the CompressedImageFormat page.
love_image_newCompressedData :: (filedata: FileData) -> (compressedimagedata: CompressedImageData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "image");
	lua.getfield(L, -1, "newCompressedData");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.rawgeti(L, lua.LUA_REGISTRYINDEX, xx filedata);
	lua.call(L, 1, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Creates a new ImageData object.
love_image_newImageData :: (width: lua.Number, height: lua.Number) -> (imagedata: ImageData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "image");
	lua.getfield(L, -1, "newImageData");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, width);
	lua.pushnumber(L, height);
	lua.call(L, 2, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Creates a new ImageData object.
love_image_newImageData :: (width: lua.Number, height: lua.Number, format: *u8, data: *u8) -> (imagedata: ImageData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "image");
	lua.getfield(L, -1, "newImageData");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, width);
	lua.pushnumber(L, height);
	lua.pushstring(L, format);
	lua.pushstring(L, data);
	lua.call(L, 4, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Creates a new ImageData object.
love_image_newImageData :: (width: lua.Number, height: lua.Number, data: *u8) -> (imagedata: ImageData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "image");
	lua.getfield(L, -1, "newImageData");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, width);
	lua.pushnumber(L, height);
	lua.pushstring(L, data);
	lua.call(L, 3, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Creates a new ImageData object.
love_image_newImageData :: (filename: *u8) -> (imagedata: ImageData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "image");
	lua.getfield(L, -1, "newImageData");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, filename);
	lua.call(L, 1, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Creates a new ImageData object.
love_image_newImageData :: (filedata: FileData) -> (imagedata: ImageData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "image");
	lua.getfield(L, -1, "newImageData");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.rawgeti(L, lua.LUA_REGISTRYINDEX, xx filedata);
	lua.call(L, 1, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
