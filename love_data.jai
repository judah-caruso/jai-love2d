// This file was generated by generate_bindings.lua

ByteData :: #type,distinct lua.Ref;
CompressedData :: #type,distinct lua.Ref;

CompressedDataFormat :: enum {
	Lz4; // lz4
	Zlib; // zlib
	Gzip; // gzip
	Deflate; // deflate
}
CompressedDataFormatMap :: string.[ "lz4", "zlib", "gzip", "deflate" ];

ContainerType :: enum {
	Data; // data
	String; // string
}
ContainerTypeMap :: string.[ "data", "string" ];

EncodeFormat :: enum {
	Base64; // base64
	Hex; // hex
}
EncodeFormatMap :: string.[ "base64", "hex" ];

HashFunction :: enum {
	Md5; // md5
	Sha1; // sha1
	Sha224; // sha224
	Sha256; // sha256
	Sha384; // sha384
	Sha512; // sha512
}
HashFunctionMap :: string.[ "md5", "sha1", "sha224", "sha256", "sha384", "sha512" ];


// Compresses a string or data using a specific compression algorithm.
love_data_compress :: (container: *u8, format: *u8, rawstring: *u8, level: lua.Number) -> (compresseddata: CompressedData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "compress");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, container);
	lua.pushstring(L, format);
	lua.pushstring(L, rawstring);
	lua.pushnumber(L, level);
	lua.call(L, 4, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Compresses a string or data using a specific compression algorithm.
love_data_compress :: (container: *u8, format: *u8, data: Data, level: lua.Number) -> (compresseddata: CompressedData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "compress");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, container);
	lua.pushstring(L, format);
	lua.rawgeti(L, lua.LUA_REGISTRYINDEX, xx data);
	lua.pushnumber(L, level);
	lua.call(L, 4, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Decode Data or a string from any of the EncodeFormats to Data or string.
love_data_decode :: (container: *u8, format: *u8, sourcestring: *u8) -> (decoded: ByteData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "decode");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, container);
	lua.pushstring(L, format);
	lua.pushstring(L, sourcestring);
	lua.call(L, 3, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Decode Data or a string from any of the EncodeFormats to Data or string.
love_data_decode :: (container: *u8, format: *u8, sourcedata: Data) -> (decoded: ByteData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "decode");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, container);
	lua.pushstring(L, format);
	lua.rawgeti(L, lua.LUA_REGISTRYINDEX, xx sourcedata);
	lua.call(L, 3, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Decompresses a CompressedData or previously compressed string or Data object.
love_data_decompress :: (container: *u8, compresseddata: CompressedData) -> (decompresseddata: Data) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "decompress");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, container);
	lua.rawgeti(L, lua.LUA_REGISTRYINDEX, xx compresseddata);
	lua.call(L, 2, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Decompresses a CompressedData or previously compressed string or Data object.
love_data_decompress :: (container: *u8, format: *u8, compressedstring: *u8) -> (decompresseddata: Data) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "decompress");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, container);
	lua.pushstring(L, format);
	lua.pushstring(L, compressedstring);
	lua.call(L, 3, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Decompresses a CompressedData or previously compressed string or Data object.
love_data_decompress :: (container: *u8, format: *u8, data: Data) -> (decompresseddata: Data) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "decompress");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, container);
	lua.pushstring(L, format);
	lua.rawgeti(L, lua.LUA_REGISTRYINDEX, xx data);
	lua.call(L, 3, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Encode Data or a string to a Data or string in one of the EncodeFormats.
love_data_encode :: (container: *u8, format: *u8, sourcestring: *u8, linelength: lua.Number) -> (encoded: ByteData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "encode");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, container);
	lua.pushstring(L, format);
	lua.pushstring(L, sourcestring);
	lua.pushnumber(L, linelength);
	lua.call(L, 4, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Encode Data or a string to a Data or string in one of the EncodeFormats.
love_data_encode :: (container: *u8, format: *u8, sourcedata: Data, linelength: lua.Number) -> (encoded: ByteData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "encode");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, container);
	lua.pushstring(L, format);
	lua.rawgeti(L, lua.LUA_REGISTRYINDEX, xx sourcedata);
	lua.pushnumber(L, linelength);
	lua.call(L, 4, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Gets the size in bytes that a given format used with love.data.pack will use.
love_data_getPackedSize :: (format: *u8) -> (size: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "getPackedSize");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, format);
	lua.call(L, 1, 1);

	return lua.tonumber(L, -1);
}
// Compute the message digest of a string using a specified hash algorithm.
love_data_hash :: (hashfunction: *u8, str: *u8) -> (rawdigest: *u8) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "hash");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, hashfunction);
	lua.pushstring(L, str);
	lua.call(L, 2, 1);

	return lua.tolstring(L, -1, null);
}
// Compute the message digest of a string using a specified hash algorithm.
love_data_hash :: (hashfunction: *u8, data: Data) -> (rawdigest: *u8) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "hash");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, hashfunction);
	lua.rawgeti(L, lua.LUA_REGISTRYINDEX, xx data);
	lua.call(L, 2, 1);

	return lua.tolstring(L, -1, null);
}
// Creates a new Data object containing arbitrary bytes.
love_data_newByteData :: (datastring: *u8) -> (bytedata: ByteData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "newByteData");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, datastring);
	lua.call(L, 1, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Creates a new Data object containing arbitrary bytes.
love_data_newByteData :: (data: Data, offset: lua.Number, size: lua.Number) -> (bytedata: ByteData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "newByteData");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.rawgeti(L, lua.LUA_REGISTRYINDEX, xx data);
	lua.pushnumber(L, offset);
	lua.pushnumber(L, size);
	lua.call(L, 3, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Creates a new Data object containing arbitrary bytes.
love_data_newByteData :: (size: lua.Number) -> (bytedata: ByteData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "newByteData");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, size);
	lua.call(L, 1, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Creates a new Data referencing a subsection of an existing Data object.
love_data_newDataView :: (data: Data, offset: lua.Number, size: lua.Number) -> (view: Data) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "newDataView");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.rawgeti(L, lua.LUA_REGISTRYINDEX, xx data);
	lua.pushnumber(L, offset);
	lua.pushnumber(L, size);
	lua.call(L, 3, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Packs (serializes) simple Lua values.
love_data_pack :: (container: *u8, format: *u8, v1: lua.Number) -> (data: Data) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "pack");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, container);
	lua.pushstring(L, format);
	lua.pushnumber(L, v1);
	lua.call(L, 3, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Unpacks (deserializes) a byte-string or Data into simple Lua values.
love_data_unpack :: (format: *u8, datastring: *u8, pos: lua.Number) -> (v1: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "unpack");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, format);
	lua.pushstring(L, datastring);
	lua.pushnumber(L, pos);
	lua.call(L, 3, 1);

	return lua.tonumber(L, -1);
}
// Unpacks (deserializes) a byte-string or Data into simple Lua values.
love_data_unpack :: (format: *u8, data: Data, pos: lua.Number) -> (v1: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "data");
	lua.getfield(L, -1, "unpack");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, format);
	lua.rawgeti(L, lua.LUA_REGISTRYINDEX, xx data);
	lua.pushnumber(L, pos);
	lua.call(L, 3, 1);

	return lua.tonumber(L, -1);
}
