// This file was generated by generate_bindings.lua

Joystick :: #type,distinct lua.Ref;

GamepadAxis :: enum {
	LeftX; // leftx
	LeftY; // lefty
	RightX; // rightx
	RightY; // righty
	TriggerLeft; // triggerleft
	TriggerRight; // triggerright
}
GamepadAxisMap :: string.[ "leftx", "lefty", "rightx", "righty", "triggerleft", "triggerright" ];

GamepadButton :: enum {
	A; // a
	B; // b
	X; // x
	Y; // y
	Back; // back
	Guide; // guide
	Start; // start
	LeftStick; // leftstick
	RightStick; // rightstick
	LeftShoulder; // leftshoulder
	RightShoulder; // rightshoulder
	DpUp; // dpup
	DpDown; // dpdown
	DpLeft; // dpleft
	DpRight; // dpright
}
GamepadButtonMap :: string.[ "a", "b", "x", "y", "back", "guide", "start", "leftstick", "rightstick", "leftshoulder", "rightshoulder", "dpup", "dpdown", "dpleft", "dpright" ];

JoystickHat :: enum {
	C; // c
	D; // d
	L; // l
	Ld; // ld
	Lu; // lu
	R; // r
	Rd; // rd
	Ru; // ru
	U; // u
}
JoystickHatMap :: string.[ "c", "d", "l", "ld", "lu", "r", "rd", "ru", "u" ];

JoystickInputType :: enum {
	Axis; // axis
	Button; // button
	Hat; // hat
}
JoystickInputTypeMap :: string.[ "axis", "button", "hat" ];


// Gets the full gamepad mapping string of the Joysticks which have the given GUID, or nil if the GUID isn't recognized as a gamepad.
love_joystick_getGamepadMappingString :: (guid: *u8) -> (mappingstring: *u8) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "joystick");
	lua.getfield(L, -1, "getGamepadMappingString");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, guid);
	lua.call(L, 1, 1);

	return lua.tolstring(L, -1, null);
}
// Gets the number of connected joysticks.
love_joystick_getJoystickCount :: () -> (joystickcount: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "joystick");
	lua.getfield(L, -1, "getJoystickCount");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.tonumber(L, -1);
}
// Gets a list of connected Joysticks.
love_joystick_getJoysticks :: () -> (joysticks: lua.Table) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "joystick");
	lua.getfield(L, -1, "getJoysticks");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Loads a gamepad mappings string or file created with love.joystick.saveGamepadMappings.
love_joystick_loadGamepadMappings :: (filename: *u8) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "joystick");
	lua.getfield(L, -1, "loadGamepadMappings");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, filename);
	lua.call(L, 1, 0);
}
// Loads a gamepad mappings string or file created with love.joystick.saveGamepadMappings.
// Saves the virtual gamepad mappings of all recognized as gamepads and have either been recently used or their gamepad bindings have been modified.
love_joystick_saveGamepadMappings :: (filename: *u8) -> (mappings: *u8) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "joystick");
	lua.getfield(L, -1, "saveGamepadMappings");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, filename);
	lua.call(L, 1, 1);

	return lua.tolstring(L, -1, null);
}
// Saves the virtual gamepad mappings of all recognized as gamepads and have either been recently used or their gamepad bindings have been modified.
love_joystick_saveGamepadMappings :: () -> (mappings: *u8) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "joystick");
	lua.getfield(L, -1, "saveGamepadMappings");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.tolstring(L, -1, null);
}
// Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a certain type. For example, if this function is used with a GUID returned by a Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis and Joystick:isGamepadDown for ''all'' Dualshock 3 controllers used with the game when run in OS X.
love_joystick_setGamepadMapping :: (guid: *u8, button: *u8, inputtype: *u8, inputindex: lua.Number, hatdir: *u8) -> (success: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "joystick");
	lua.getfield(L, -1, "setGamepadMapping");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, guid);
	lua.pushstring(L, button);
	lua.pushstring(L, inputtype);
	lua.pushnumber(L, inputindex);
	lua.pushstring(L, hatdir);
	lua.call(L, 5, 1);

	return lua.toboolean(L, -1);
}
// Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a certain type. For example, if this function is used with a GUID returned by a Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis and Joystick:isGamepadDown for ''all'' Dualshock 3 controllers used with the game when run in OS X.
