// This file was generated by generate_bindings.lua


PowerState :: enum {
	Unknown; // unknown
	Battery; // battery
	NoBattery; // nobattery
	Charging; // charging
	Charged; // charged
}
PowerStateMap :: string.[ "unknown", "battery", "nobattery", "charging", "charged" ];


// Gets text from the clipboard.
love_system_getClipboardText :: () -> (text: *u8) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "system");
	lua.getfield(L, -1, "getClipboardText");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.tolstring(L, -1, null);
}
// Gets the current operating system. In general, LÃ–VE abstracts away the need to know the current operating system, but there are a few cases where it can be useful (especially in combination with os.execute.)
love_system_getOS :: () -> (osstring: *u8) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "system");
	lua.getfield(L, -1, "getOS");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.tolstring(L, -1, null);
}
// Gets information about the system's power supply.
love_system_getPowerInfo :: () -> struct { _state: *u8; _percent: lua.Number; _seconds: lua.Number; } #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "system");
	lua.getfield(L, -1, "getPowerInfo");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 3);

	return .{ _state = lua.tolstring(L, -3, null), _percent = lua.tonumber(L, -2), _seconds = lua.tonumber(L, -1) };
}
// Gets the amount of logical processor in the system.
love_system_getProcessorCount :: () -> (processorcount: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "system");
	lua.getfield(L, -1, "getProcessorCount");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.tonumber(L, -1);
}
// Gets whether another application on the system is playing music in the background.
love_system_hasBackgroundMusic :: () -> (backgroundmusic: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "system");
	lua.getfield(L, -1, "hasBackgroundMusic");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.toboolean(L, -1);
}
// Opens a URL with the user's web or file browser.
love_system_openURL :: (url: *u8) -> (success: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "system");
	lua.getfield(L, -1, "openURL");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, url);
	lua.call(L, 1, 1);

	return lua.toboolean(L, -1);
}
// Puts text in the clipboard.
love_system_setClipboardText :: (text: *u8) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "system");
	lua.getfield(L, -1, "setClipboardText");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, text);
	lua.call(L, 1, 0);
}
// Causes the device to vibrate, if possible. Currently this will only work on Android and iOS devices that have a built-in vibration motor.
love_system_vibrate :: (seconds: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "system");
	lua.getfield(L, -1, "vibrate");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, seconds);
	lua.call(L, 1, 0);
}
