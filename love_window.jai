// This file was generated by generate_bindings.lua


DisplayOrientation :: enum {
	Unknown; // unknown
	Landscape; // landscape
	LandscapeFlipped; // landscapeflipped
	Portrait; // portrait
	PortraitFlipped; // portraitflipped
}
DisplayOrientationMap :: string.[ "unknown", "landscape", "landscapeflipped", "portrait", "portraitflipped" ];

FullscreenType :: enum {
	Desktop; // desktop
	Exclusive; // exclusive
	Normal; // normal
}
FullscreenTypeMap :: string.[ "desktop", "exclusive", "normal" ];

MessageBoxType :: enum {
	Info; // info
	Warning; // warning
	Error; // error
}
MessageBoxTypeMap :: string.[ "info", "warning", "error" ];


// Closes the window. It can be reopened with love.window.setMode.
love_window_close :: () #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "close");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 0);
}
// Converts a number from pixels to density-independent units.
love_window_fromPixels :: (pixelvalue: lua.Number) -> (value: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "fromPixels");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, pixelvalue);
	lua.call(L, 1, 1);

	return lua.tonumber(L, -1);
}
// Converts a number from pixels to density-independent units.
love_window_fromPixels :: (px: lua.Number, py: lua.Number) -> struct { _x: lua.Number; _y: lua.Number; } #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "fromPixels");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, px);
	lua.pushnumber(L, py);
	lua.call(L, 2, 2);

	return .{ _x = lua.tonumber(L, -2), _y = lua.tonumber(L, -1) };
}
// Gets the DPI scale factor associated with the window.
love_window_getDPIScale :: () -> (scale: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "getDPIScale");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.tonumber(L, -1);
}
// Gets the width and height of the desktop.
love_window_getDesktopDimensions :: (displayindex: lua.Number) -> struct { _width: *u8; _height: *u8; } #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "getDesktopDimensions");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, displayindex);
	lua.call(L, 1, 2);

	return .{ _width = lua.tolstring(L, -2, null), _height = lua.tolstring(L, -1, null) };
}
// Gets the number of connected monitors.
love_window_getDisplayCount :: () -> (count: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "getDisplayCount");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.tonumber(L, -1);
}
// Gets the name of a display.
love_window_getDisplayName :: (displayindex: lua.Number) -> (name: *u8) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "getDisplayName");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, displayindex);
	lua.call(L, 1, 1);

	return lua.tolstring(L, -1, null);
}
// Gets current device display orientation.
love_window_getDisplayOrientation :: (displayindex: lua.Number) -> (orientation: *u8) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "getDisplayOrientation");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, displayindex);
	lua.call(L, 1, 1);

	return lua.tolstring(L, -1, null);
}
// Gets whether the window is fullscreen.
love_window_getFullscreen :: () -> struct { _fullscreen: s32; _fstype: *u8; } #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "getFullscreen");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 2);

	return .{ _fullscreen = lua.toboolean(L, -2), _fstype = lua.tolstring(L, -1, null) };
}
// Gets a list of supported fullscreen modes.
love_window_getFullscreenModes :: (displayindex: lua.Number) -> (modes: lua.Table) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "getFullscreenModes");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, displayindex);
	lua.call(L, 1, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Gets the window icon.
love_window_getIcon :: () -> (imagedata: ImageData) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "getIcon");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX);
}
// Gets the display mode and properties of the window.
love_window_getMode :: () -> struct { _width: lua.Number; _height: lua.Number; _flags: lua.Table; } #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "getMode");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 3);

	return .{ _width = lua.tonumber(L, -3), _height = lua.tonumber(L, -2), _flags = xx lua.luaL_ref(L, lua.LUA_REGISTRYINDEX) };
}
// Gets the position of the window on the screen.
love_window_getPosition :: () -> struct { _x: lua.Number; _y: lua.Number; _displayindex: lua.Number; } #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "getPosition");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 3);

	return .{ _x = lua.tonumber(L, -3), _y = lua.tonumber(L, -2), _displayindex = lua.tonumber(L, -1) };
}
// Gets area inside the window which is known to be unobstructed by a system title bar, the iPhone X notch, etc. Useful for making sure UI elements can be seen by the user.
love_window_getSafeArea :: () -> struct { _x: lua.Number; _y: lua.Number; _w: lua.Number; _h: lua.Number; } #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "getSafeArea");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 4);

	return .{ _x = lua.tonumber(L, -4), _y = lua.tonumber(L, -3), _w = lua.tonumber(L, -2), _h = lua.tonumber(L, -1) };
}
// Gets the window title.
love_window_getTitle :: () -> (title: *u8) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "getTitle");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.tolstring(L, -1, null);
}
// Gets current vertical synchronization (vsync).
love_window_getVSync :: () -> (vsync: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "getVSync");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.tonumber(L, -1);
}
// Checks if the game window has keyboard focus.
love_window_hasFocus :: () -> (focus: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "hasFocus");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.toboolean(L, -1);
}
// Checks if the game window has mouse focus.
love_window_hasMouseFocus :: () -> (focus: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "hasMouseFocus");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.toboolean(L, -1);
}
// Gets whether the display is allowed to sleep while the program is running.
love_window_isDisplaySleepEnabled :: () -> (enabled: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "isDisplaySleepEnabled");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.toboolean(L, -1);
}
// Gets whether the Window is currently maximized.
love_window_isMaximized :: () -> (maximized: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "isMaximized");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.toboolean(L, -1);
}
// Gets whether the Window is currently minimized.
love_window_isMinimized :: () -> (minimized: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "isMinimized");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.toboolean(L, -1);
}
// Checks if the window is open.
love_window_isOpen :: () -> (open: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "isOpen");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.toboolean(L, -1);
}
// Checks if the game window is visible.
love_window_isVisible :: () -> (visible: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "isVisible");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 1);

	return lua.toboolean(L, -1);
}
// Makes the window as large as possible.
love_window_maximize :: () #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "maximize");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 0);
}
// Minimizes the window to the system's task bar / dock.
love_window_minimize :: () #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "minimize");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 0);
}
// Causes the window to request the attention of the user if it is not in the foreground.
love_window_requestAttention :: (continuous: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "requestAttention");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushboolean(L, continuous);
	lua.call(L, 1, 0);
}
// Restores the size and position of the window if it was minimized or maximized.
love_window_restore :: () #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "restore");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.call(L, 0, 0);
}
// Sets whether the display is allowed to sleep while the program is running.
love_window_setDisplaySleepEnabled :: (enable: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "setDisplaySleepEnabled");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushboolean(L, enable);
	lua.call(L, 1, 0);
}
// Enters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected.
love_window_setFullscreen :: (fullscreen: s32) -> (success: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "setFullscreen");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushboolean(L, fullscreen);
	lua.call(L, 1, 1);

	return lua.toboolean(L, -1);
}
// Enters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected.
love_window_setFullscreen :: (fullscreen: s32, fstype: *u8) -> (success: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "setFullscreen");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushboolean(L, fullscreen);
	lua.pushstring(L, fstype);
	lua.call(L, 2, 1);

	return lua.toboolean(L, -1);
}
// Sets the window icon until the game is quit. Not all operating systems support very large icon images.
love_window_setIcon :: (imagedata: ImageData) -> (success: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "setIcon");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.rawgeti(L, lua.LUA_REGISTRYINDEX, xx imagedata);
	lua.call(L, 1, 1);

	return lua.toboolean(L, -1);
}
// Sets the display mode and properties of the window.
love_window_setMode :: (width: lua.Number, height: lua.Number, flags: lua.Table) -> (success: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "setMode");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, width);
	lua.pushnumber(L, height);
	lua.createtable(L, 0, 0);
	lua.call(L, 3, 1);

	return lua.toboolean(L, -1);
}
// Sets the position of the window on the screen.
love_window_setPosition :: (x: lua.Number, y: lua.Number, displayindex: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "setPosition");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, x);
	lua.pushnumber(L, y);
	lua.pushnumber(L, displayindex);
	lua.call(L, 3, 0);
}
// Sets the window title.
love_window_setTitle :: (title: *u8) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "setTitle");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, title);
	lua.call(L, 1, 0);
}
// Sets vertical synchronization mode.
love_window_setVSync :: (vsync: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "setVSync");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, vsync);
	lua.call(L, 1, 0);
}
// Displays a message box dialog above the love window. The message box contains a title, optional text, and buttons.
love_window_showMessageBox :: (title: *u8, message: *u8, type: *u8, attachtowindow: s32) -> (success: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "showMessageBox");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, title);
	lua.pushstring(L, message);
	lua.pushstring(L, type);
	lua.pushboolean(L, attachtowindow);
	lua.call(L, 4, 1);

	return lua.toboolean(L, -1);
}
// Displays a message box dialog above the love window. The message box contains a title, optional text, and buttons.
love_window_showMessageBox :: (title: *u8, message: *u8, buttonlist: lua.Table, type: *u8, attachtowindow: s32) -> (pressedbutton: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "showMessageBox");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushstring(L, title);
	lua.pushstring(L, message);
	lua.createtable(L, 0, 0);
	lua.pushstring(L, type);
	lua.pushboolean(L, attachtowindow);
	lua.call(L, 5, 1);

	return lua.tonumber(L, -1);
}
// Converts a number from density-independent units to pixels.
love_window_toPixels :: (value: lua.Number) -> (pixelvalue: lua.Number) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "toPixels");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, value);
	lua.call(L, 1, 1);

	return lua.tonumber(L, -1);
}
// Converts a number from density-independent units to pixels.
love_window_toPixels :: (x: lua.Number, y: lua.Number) -> struct { _px: lua.Number; _py: lua.Number; } #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "toPixels");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, x);
	lua.pushnumber(L, y);
	lua.call(L, 2, 2);

	return .{ _px = lua.tonumber(L, -2), _py = lua.tonumber(L, -1) };
}
// Sets the display mode and properties of the window, without modifying unspecified properties.
love_window_updateMode :: (width: lua.Number, height: lua.Number, settings: lua.Table) -> (success: s32) #no_context #c_call {
	lua.getfield(L, lua.LUA_GLOBALSINDEX, "love");
	lua.getfield(L, -1, "window");
	lua.getfield(L, -1, "updateMode");
	lua._remove(L, -3);
	lua._remove(L, -2);

	lua.pushnumber(L, width);
	lua.pushnumber(L, height);
	lua.createtable(L, 0, 0);
	lua.call(L, 3, 1);

	return lua.toboolean(L, -1);
}
